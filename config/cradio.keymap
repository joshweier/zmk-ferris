/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

#define HM_TAPPING_TERM 200
#define HM_TAPPING_TERM_FAST 150

/ {

	&num_word {
	    layers = <num_layer>;
	    continue-list = <
		BACKSPACE DELETE DOT COMMA
		SLASH ASTERISK PLUS MINUS EQUAL DOLLAR
		RS(SPACE)
	    >;
	    ignore-modifiers;  // modifiers don't deactivate the layer
	};

	combos {
		compatible = "zmk,combos";

		combo_shift {
		    timeout-ms = <50>;
		    key-positions = <31 32>;
		    bindings = <&caps_word>;
		};

		combo_numword {
		    timeout-ms = <50>;
		    key-positions = <30 33>;
		    bindings = <&num_word>;
		};

		combo_tab {
		    timeout-ms = <50>;
		    key-positions = <0 9>;
		    bindings = <&kp TAB>;
		};

		combo_enter {
		    timeout-ms = <50>;
		    key-positions = <10 19>;
		    bindings = <&kp RET>;
		};

		combo_enter_r {
		    timeout-ms = <50>;
		    key-positions = <16 17>;
		    bindings = <&kp RET>;
		};

		combo_sys {
		    timeout-ms = <50>;
		    key-positions = <20 29>;
		    bindings = <&to 3>;
		};

	    };

	behaviors {
		// Positional Homerow mods
		// Homerow mods that prevent accidental activations when rolling keys,
		// such as when typing `st` or `ne` on colemak-dh layouts or `as` on
		// qwerty.
		//
		// Works by only allowing a mod to activate within tapping-term if
		// it's on the opposite side of the keyboard or on the same side thumb
		// keys.

		// Further optimization using urob's timerless homerow mods method:
		// https://github.com/urob/zmk-config#timeless-homerow-mods

		hm_l: homerow_mods_left {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MODS_LEFT";
		    #binding-cells = <2>;
		    bindings = <&kp>,  <&kp>;

		    flavor = "balanced";
		    tapping-term-ms = <HM_TAPPING_TERM>;
		    quick-tap-ms = <175>;                // repeat on tap-into-hold
		    global-quick-tap-ms = <150>;         // requires PR #1387
		    hold-trigger-key-positions = <KEYS_R KEYS_T>;
		    hold-trigger-on-release;             // requires PR #1423
		};

		hm_r: homerow_mods_right {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MODS_RIGHT";
		    #binding-cells = <2>;
		    bindings = <&kp>, <&kp>;

		    flavor = "balanced";
		    tapping-term-ms = <HM_TAPPING_TERM>;
		    quick_tap_ms = <175>;
		    global-quick-tap-ms = <150>;         // requires PR #1387
		    hold-trigger-key-positions = <KEYS_L KEYS_T>;
		    hold-trigger-on-release;             // requires PR #1423
		};

		// Positional Homerow mods for shift
		// Use faster tapping term and disable some features that may
		// cause false negatives.
		hm_shift_l: hm_shift_l {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MODS_FAST_LEFT";
		    #binding-cells = <2>;
		    bindings = <&kp>, <&kp>;

		    flavor = "balanced";
		    tapping-term-ms = <HM_TAPPING_TERM_FAST>;
		    quick_tap_ms = <175>;
		    global-quick-tap-ms = <150>;         // requires PR #1387
		    hold-trigger-key-positions = <KEYS_R KEYS_T>;
		    hold-trigger-on-release;             // requires PR #1423
		};

		hm_shift_r: hm_shift_r {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MODS_FAST_RIGHT";
		    #binding-cells = <2>;
		    bindings = <&kp>, <&kp>;

		    flavor = "balanced";
		    tapping-term-ms = <HM_TAPPING_TERM_FAST>;
		    quick_tap_ms = <175>;
		    global-quick-tap-ms = <150>;         // requires PR #1387
		    hold-trigger-key-positions = <KEYS_L KEYS_T>;
		    hold-trigger-on-release;             // requires PR #1423
		};

		/*
		 * Non-Positional Homerow Mods
		 * Used for &mm_grescm_gui behavior on left hand.
		 *
		 * Usage: &hm LSHFT T
		 * Tap: T
		 * Tap-Tap-Hold: Repeat T
		 * Hold: LSHIFT
		 */
		hm: homerow_mods {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MODS";
		    #binding-cells = <2>;
		    bindings = <&kp>, <&kp>;

		    flavor = "balanced";
		    tapping-term-ms = <HM_TAPPING_TERM>;
		    quick_tap_ms = <200>;
		};
	 
		/*
		hm: homerow_mods {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MODS";
		    #binding-cells = <2>;
		    tapping-term-ms = <200>;
		    quick_tap_ms = <200>;
		    flavor = "tap-preferred";
		    bindings = <&kp>, <&kp>;
		};*/

		ltf: layer_tap_fast {
		    compatible = "zmk,behavior-hold-tap";
		    label = "LAYER TAP FAST";
		    #binding-cells = <2>;
		    tapping-term-ms = <125>;
		    quick_tap_ms = <125>;
		    flavor = "tap-preferred";
		    bindings = <&mo>, <&kp>;
		};

		td_par: tdpar {
		    compatible = "zmk,behavior-tap-dance";
		    label = "TDPAR";
		    #binding-cells = <0>;
		    tapping-term-ms = <150>;
		    bindings = <&kp LPAR>, <&kp RPAR>;
		};

		td_brc: tdbrc {
		    compatible = "zmk,behavior-tap-dance";
		    label = "TDBRC";
		    #binding-cells = <0>;
		    tapping-term-ms = <150>;
		    bindings = <&kp LBRC>, <&kp RBRC>;
		};

		td_bkt: tdbkt {
		    compatible = "zmk,behavior-tap-dance";
		    label = "TDBKT";
		    #binding-cells = <0>;
		    tapping-term-ms = <150>;
		    bindings = <&kp LBKT>, <&kp RBKT>;
		};

		td_apos: tdapos {
		    compatible = "zmk,behavior-tap-dance";
		    label = "TDAPOS";
		    #binding-cells = <0>;
		    tapping-term-ms = <150>;
		    bindings = <&kp APOS>, <&kp PIPE>;
		};

	};

	macros {
		ZMK_MACRO(right_arrow,
			bindings = <&macro_tap &kp MINUS &kp GT>;
		)

		ZMK_MACRO(left_arrow,
			bindings = <&macro_tap &kp LT &kp MINUS>;
		)
	};

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q &kp W &kp E &kp R &kp T     &kp Y &kp U &kp I &kp O &kp P
                &hm_l LCTL A &hm_l LALT S &hm_l LG(LC(LALT)) D &hm_shift_l LSHFT F &hm_l LGUI G     &hm_r RGUI H &hm_shift_r RSHFT J &hm_r RG(RC(RALT)) K &hm_r RALT L &hm_r RCTRL SEMI
                &kp Z &kp X &kp C &kp V &kp B     &kp N &kp M &kp COMMA &kp DOT &kp FSLH
                         &ltf 2 ESC &kp SPACE     &kp BSPC &mo 1
            >;
        };

        lower_layer {
            bindings = <
   &kp F1 &kp F2 &kp F3 &kp F4 &kp F5   &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
   &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp F11 
   &kp N6 &kp N7 &kp N8 &kp N9 &kp N0   &kp HOME &kp PGDN &kp PGUP &kp END &kp F12 
                       &trans &kp TAB   &trans &trans 
            >;
        };

        raise_layer {
            bindings = <
&kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp KP_MULTIPLY &td_par &kp TILDE 
 &none &none &none &left_arrow &right_arrow   &kp MINUS &kp EQUAL &kp DQT &td_brc &kp APOS 
            &none &none &none &none &kp DEL   &kp UNDER &kp PLUS &kp SQT &td_bkt &kp BSLH 
                             &trans &kp TAB   &trans &trans 
            >;
        };

        sys_layer {
            bindings = <
             &none &none &none &none &none   &none &none &none &none &none 
&kp C_PREV &kp C_PP &kp C_NEXT &none &none   &none &none &none &none &none
        &bt BT_CLR &none &none &none &none   &none &none &none &none &none
                           &to 0 &to 0   &to 0 &to 0
            >;
        };

        num_layer {
            bindings = <
        &none &none &none &none &none   &none &kp N1 &kp N2 &kp N3 &none 
   &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &none &kp N4 &kp N5 &kp N6 &none 
   &kp N6 &kp N7 &kp N8 &kp N9 &kp N0   &none &kp N7 &kp N8 &kp N9 &kp N0 
                        &trans &trans   &trans &trans 
            >;
        };

    };
};
